#!/usr/bin/env bash
set -eo pipefail; [[ -n "$PLUSHU_TRACE" ]] && set -x

# If a plugin name was specified
if [[ -n $2 ]]; then

  case "$2" in
    git:*|ssh:*|*@*:*|http:*|https:*)
      remote=$2
      defname=${2#*:}
      defname=${defname##*/}
      ;;
    */*)
      remote=https://github.com/$2.git
      defname=${2##*/}
      ;;
    *)
      remote=https://github.com/plushu/plushu-${2#plushu-}.git
      defname=$2
      ;;
  esac
  defname=${defname#plushu-}
  defname=${defname%-plugin}
  defname=${defname%.git}
  target=${3:-$defname}

  # If the plugin already exists
  if [[ -e "$PLUSHU_ROOT/plugins/$target" ]]; then
    cat >&2 <<EOF
Plugin '$target' is already installed.
Use \`plushu $PLUSHU_PLUGIN_NAME:reinstall $target\` to rerun its install script,
or \`plushu $PLUSHU_PLUGIN_NAME:uninstall $target\` first if you want to do a hard reinstall.
EOF
    exit 1

  # If the plugin isn't already installed
  else
    git clone $remote "$PLUSHU_ROOT/plugins/$target"

    # When installing as root, give the plushu user ownership of everything
    # within the newly-cloned plugin
    if [[ "$EUID" == 0 ]]; then
      chown -R plushu "$PLUSHU_ROOT/plugins/$target"
    fi

    # If the newly-cloned plugin has an install script
    if [[ -f "$PLUSHU_ROOT/plugins/$target/install" ]]; then

      # We don't test for executable status, we just
      # let the shell fail if the install script isn't set executable
      PLUSHU_PLUGIN_NAME="$target" "$PLUSHU_ROOT/plugins/$target/install"

    else
      # Notify that the plugin has been installed
      # in lieu of a more complex
      echo "Plugin '$target' installed."
    fi
  fi

# If no plugin name was specified
else
  echo "Missing name of plugin to install" >&2
  exit 1
fi
